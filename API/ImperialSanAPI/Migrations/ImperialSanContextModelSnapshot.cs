// <auto-generated />
using System;
using ImperialSanAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ImperialSanAPI.Migrations
{
    [DbContext(typeof(ImperialSanContext))]
    partial class ImperialSanContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("ImperialSanAPI.Models.Basket", b =>
                {
                    b.Property<int>("BasketId")
                        .HasColumnType("int")
                        .HasColumnName("basket_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("BasketId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "user_basket_fk_idx");

                    b.ToTable("basket", (string)null);
                });

            modelBuilder.Entity("ImperialSanAPI.Models.BasketPosition", b =>
                {
                    b.Property<int>("BasketPositionId")
                        .HasColumnType("int")
                        .HasColumnName("basket_position_id");

                    b.Property<int?>("BasketId")
                        .HasColumnType("int")
                        .HasColumnName("basket_id");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("ProductQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_quantity")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("BasketPositionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductId" }, "basket_position_product_fk_idx");

                    b.HasIndex(new[] { "BasketId" }, "basket_to_position_fk_idx");

                    b.ToTable("basket_position", (string)null);
                });

            modelBuilder.Entity("ImperialSanAPI.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("text")
                        .HasColumnName("category_description");

                    b.Property<string>("CategoryTitle")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("category_title");

                    b.Property<int?>("ParenCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("paren_category_id");

                    b.HasKey("CategoryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ParenCategoryId" }, "parent_category_fk_idx");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("ImperialSanAPI.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<DateOnly?>("DateOfCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("date_of_create")
                        .HasDefaultValueSql("curdate()");

                    b.Property<string>("DiliveryAddres")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("dilivery_addres");

                    b.Property<string>("OrderStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('В обработке','Собиарется','Собран','В пути','Доставлен','Отменён')")
                        .HasColumnName("order_status")
                        .HasDefaultValueSql("'В обработке'");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("enum('Онлайн','Наличными')")
                        .HasColumnName("payment_method");

                    b.Property<float>("Price")
                        .HasColumnType("float unsigned")
                        .HasColumnName("price");

                    b.Property<string>("UserComment")
                        .HasColumnType("text")
                        .HasColumnName("user_comment");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("OrderId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "order_user_fk_idx");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("ImperialSanAPI.Models.OrderPosition", b =>
                {
                    b.Property<int>("OrderPositionId")
                        .HasColumnType("int")
                        .HasColumnName("order_position_id");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<float>("ProductPriceInMoment")
                        .HasColumnType("float unsigned")
                        .HasColumnName("product_price_in_moment");

                    b.Property<int?>("ProductQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_quantity")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("OrderPositionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OrderId" }, "order_to_position");

                    b.HasIndex(new[] { "ProductId" }, "product_order_position_fk");

                    b.ToTable("order_position", (string)null);
                });

            modelBuilder.Entity("ImperialSanAPI.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("BrandTitle")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("brand_title");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateOnly?>("DateOfCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("date_of_create")
                        .HasDefaultValueSql("curdate()");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_url");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("'1'");

                    b.Property<float>("Price")
                        .HasColumnType("float unsigned")
                        .HasColumnName("price");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("text")
                        .HasColumnName("product_description");

                    b.Property<string>("ProductTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_title");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int")
                        .HasColumnName("quantity_in_stock");

                    b.HasKey("ProductId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CategoryId" }, "category_fk_idx");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("ImperialSanAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("DiliveryAddress")
                        .HasColumnType("text")
                        .HasColumnName("dilivery_address");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("blob")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("role")
                        .HasDefaultValueSql("'User'");

                    b.Property<string>("UserMail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("user_mail");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("user_name");

                    b.Property<string>("UserPatronymic")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("user_patronymic");

                    b.Property<string>("UserPhone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("char(11)")
                        .HasColumnName("user_phone")
                        .IsFixedLength();

                    b.Property<string>("UserSurname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("user_surname");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserMail" }, "user_mail_UNIQUE")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("ImperialSanAPI.Models.Basket", b =>
                {
                    b.HasOne("ImperialSanAPI.Models.User", "User")
                        .WithMany("Baskets")
                        .HasForeignKey("UserId")
                        .HasConstraintName("user_basket_fk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ImperialSanAPI.Models.BasketPosition", b =>
                {
                    b.HasOne("ImperialSanAPI.Models.Basket", "Basket")
                        .WithMany("BasketPositions")
                        .HasForeignKey("BasketId")
                        .HasConstraintName("basket_to_position_fk");

                    b.HasOne("ImperialSanAPI.Models.Product", "Product")
                        .WithMany("BasketPositions")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("basket_position_product_fk");

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ImperialSanAPI.Models.Category", b =>
                {
                    b.HasOne("ImperialSanAPI.Models.Category", "ParenCategory")
                        .WithMany("InverseParenCategory")
                        .HasForeignKey("ParenCategoryId")
                        .HasConstraintName("parent_category_fk");

                    b.Navigation("ParenCategory");
                });

            modelBuilder.Entity("ImperialSanAPI.Models.Order", b =>
                {
                    b.HasOne("ImperialSanAPI.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("order_user_fk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ImperialSanAPI.Models.OrderPosition", b =>
                {
                    b.HasOne("ImperialSanAPI.Models.Order", "Order")
                        .WithMany("OrderPositions")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("order_to_position");

                    b.HasOne("ImperialSanAPI.Models.Product", "Product")
                        .WithMany("OrderPositions")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("product_order_position_fk");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ImperialSanAPI.Models.Product", b =>
                {
                    b.HasOne("ImperialSanAPI.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("category_fk");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ImperialSanAPI.Models.Basket", b =>
                {
                    b.Navigation("BasketPositions");
                });

            modelBuilder.Entity("ImperialSanAPI.Models.Category", b =>
                {
                    b.Navigation("InverseParenCategory");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ImperialSanAPI.Models.Order", b =>
                {
                    b.Navigation("OrderPositions");
                });

            modelBuilder.Entity("ImperialSanAPI.Models.Product", b =>
                {
                    b.Navigation("BasketPositions");

                    b.Navigation("OrderPositions");
                });

            modelBuilder.Entity("ImperialSanAPI.Models.User", b =>
                {
                    b.Navigation("Baskets");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
